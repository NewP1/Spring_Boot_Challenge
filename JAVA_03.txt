22.01.05 Day 3
연산자
연산자란 특정한 작업을 하기 위해 사용하는 기호.
작업의 종류에 따라 대입, 산술, 비교, 논리 연산자 등이 있다. 다른 자료형끼리의 연산으로 형변환이 필요하다면, 자체적으로 형변환을 시켜 결과값이 나온다.
	산술 연산자 : 수학적인 계산에 사용되는 연산자. (+, -, *, /, %), + 연산자는 문자열과 문자열을 결합할 때도 사용된다. 
	단항 연산자 : 하나의 항을 대상으로 연산이 이루어지는 연산자.(+, -, ++, --) 
	논리 연산자 : and는 &&, or는 ||, not은 !를 쓴다
연산의 우선순위, 연산자는 우선순위가 있고 우선순위에 따라 연산되는 순서가 다르다.


비교와 Boolean
Boolean은 참과 거짓을 의미하는 데이터 타입으로 bool이라고도 부른다. True와 False 두 가지의 값을 가진다.
	비교연산자(관계 연산자) : 주어진 값들이 같은지, 다른지, 큰지, 작은지를 구분하기 위해 사용하는 연산자.(==, !=, >, <, >=, <=, .equals), 문자열을 비교할 때는 .equal 사용(메소드) 


조건문
조건문이란 주어진 조건에 따라서 애플리케이션을 다르게 동작하도록 하는 것. 위의 불린 값을 기준으로 실행 흐름을 제어한다.
	if : 조건문에서는 if 절의 값이 true일 때 then 절이 실행된다. 소괄호에는 불린 값만 가능하다.
	else : if-else 절은 if 절의 값이 true일 때 then 절이 실행되고, false일 때 else절이 실행된다.
	else if : else if 절을 이용하면 조건문의 흐름을 더 자유롭게 이용한다. else if 절은 여러 개가 복수로 등장할 수 있다. else절은 생략이 가능하다. if – else if – else 순으로 참 거짓을 판단하고 결과가 나온다.
	switch 문 : 사용빈도는 적지만 조건이 많다면 switch문이 로직을 보다 명료하게 보여줄 수 있다. 주어진 케이스가 없는 경우 default문이 실행된다. switch문을 사용할 때 한가지 주의할 것은 switch의 조건으로는 몇가지 제한된 데이터타입만을 사용할 수 있다. (Byte, short, char, int, enum, String, Character, Byte, Shor, Integer)

반복문
while문을 보면 반복의 횟수를 지정하기 위해 변수 i를 초기화 하고, 반복문으로 증가시킨다. 이런 단순 패턴을 문법적인 형태로 만든 것이 for문이다. While과 for는 서로 대체 가능하다.
반복문이 없이 적은 수의 반복은 직접 해결할 수 있지만, 반복 횟수가 커질수록 사람이 할 수 있는 노동의 정도를 넘기 때문에 반복문 문법은 꼭 필요로 한다.
반복문의 제어
	break : 반복작업을 중간에 중단시키고 싶다면 break를 사용하면 된다.
	continue : 실행을 즉시 중단하면서 반복은 지속해가게 하려면 continue를 사용하면 된다. 

