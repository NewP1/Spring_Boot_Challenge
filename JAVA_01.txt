JAVA의 언어적 특성
 
장점

1. 이식성이 높은 언어이다.
 - 자바 언어로 개발된 프로그램은 소스파일을 수정하지
   않아도, 자바 실행 환경(JRE)이 설치되어 있는 모든 운영 체제에서 실행 가능하다.

2. 객체 지향 언어이다. 
 - 객체 지향 프로그래밍(Object Oriented Programming)이란 각 부품에 해당하는 객체들을 먼저 만들고 이것들을 하나씩
   조립 및 연결해서 전체 프로그램을 완성하는 기법. 100% 객체 지향 언어이고, 객체 지향 언어가 가져야 할 캡슐화, 상속,
   다형성 기능을 완벽하게 지원한다.
 - 객체 지향 프로그래밍의 대표적 특징: 상속, 캡슐화, 다형성, 추상화 -> 유지보수 용이하게 함

3. 함수적 스타일 코딩을 지원한다.
 - 함수적 프로그래밍은 대용량의 데이터 병렬 처리와 이벤트 지향 프로그래밍을 위해 적합.
   자바 8부터 람다식을 지원하는데, 람다식을 사용하면 컬렉션 요소를 필터링, 매핑, 집계 처리 하는게 쉬워지고
   코드가 매우 간결해진다.

4. 메모리를 자동으로 관리한다.
 - 개발자가 메모리에 직접 접근할 수 없으며 자바가 직접 메모리를 관리. 객체를 생성할 때 자동적으로 메모리 영역을 찾아
   할당하고, 사용이 완료되면 자동적으로 사용하지 않는 객체를 제거. 개발자의 수고를 덜어준다.
   Garbage Collection으로 메모리 관리 자동으로 수행

5. 다양한 애플리케이션을 개발할 수 있다.
 - 자바는 다양한 운영체제(OS)에서 실행되는 프로그램을 개발할 수 있다. 또 콘솔 프로그램부터 모바일용 안드로이드 앱에
   이르기까지 거의 모든 곳에 실행되는 프로그램을 개발할 수 있다.

6. 멀티스레드를 쉽게 구현할 수 있다.
 - 자바는 스레드 생성 및 제어와 관련된 라이브러리 API를 제공하고 있기 때문에 실행되는 운영체제에 상관없이
   멀티 스레드를 쉽게 구현할 수 있다.(Thread 클래스 : 화이트박스 방식, Runnable 인터페이스 : 블랙박스 방식)

7. 동적 로딩(Dynamic Loading)을 지원한다.
 - 각 객체가 필요한 시점에 클래스를 동적 로딩해서 생성한다. 유지보수 시 해당 클래스만 수정하면 되기 때문에 
   전체를 다시 컴파일할 필요가 없어 유지보수가 쉽고 빠르다.

8. 오픈소스 라이브러리가 풍부하다.
 - 오픈소스 라이브러리를 사용하면 개발 시간을 단축하면서 안정성이 높은 애플리케이션을 쉽게 개발할 수 있다.

단점

1. 속도가 느리다.
 - 자바는 한 번의 컴파일링으로 실행 가능한 기계어가 만들어지지 않고 JVM에 의해 기계어로 번역되고 실행하는 과정을
   거치기 때문에 C나 C++의 컴파일 단계에서 만들어지는 완전한 기계어보다는 속도가 느리다.

2. 예외처리가 불편하다.
 - 자바는 다른 언어들과 달리 프로그램 실행 시 발생할 수 있는 예외들을 개발자가 직접 선언하여 처리해야한다.